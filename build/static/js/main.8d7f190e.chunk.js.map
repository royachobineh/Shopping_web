{"version":3,"sources":["components/UnsplashImage.js","components/Loader.js","App.js","serviceWorker.js","index.js"],"names":["Img","styled","img","UnsplashImage","url","alt","label","price","site_url","href","target","className","src","Loading","div","Loader","GlobalStyle","createGlobalStyle","WrapperImages","section","offsetCounter","App","useState","searchTerm","setSearchTerm","images","setImage","useEffect","fetchImages","offset","apiRoot","axios","get","then","res","data","type","placeholder","onChange","event","value","dataLength","length","next","hasMore","loader","columnsCountBreakPoints","350","500","900","1200","1400","1600","gutter","filter","val","tags","toLowerCase","includes","map","image","i","image_url","slug","name","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"2cAGA,IAAMA,EAAMC,IAAOC,IAAV,KASIC,EAAgB,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,IAAKC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACtD,OACE,oCACE,uBAAGC,KAAMD,EAAUE,OAAO,UACxB,gCACE,yBAAKC,UAAU,UACb,kBAACX,EAAD,CAAKY,IAAKR,EAAKC,IAAKA,IACpB,yBAAKM,UAAU,eACb,2BAAIL,IAEN,yBAAKK,UAAU,SACb,2BAAIJ,S,8lCCpBlB,IAAMM,EAAUZ,IAAOa,IAAV,KA4DAC,EAAS,WACpB,OACE,kBAACF,EAAD,KACE,yBAAKF,UAAU,gBACb,8BAEA,8BAEA,8BAEA,iC,0VC/DR,IAAMK,EAAcC,YAAH,KAYXC,EAAgBjB,IAAOkB,QAAV,KAIfC,EAAgB,EAoDLC,MAnDf,WAAgB,IAAD,EACuBC,mBAAS,IADhC,mBACNC,EADM,KACMC,EADN,OAEcF,mBAAS,IAFvB,mBAENG,EAFM,KAEEC,EAFF,KAGbC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAc,WAAiB,IAAhBC,EAAe,uDAAN,EAC5BA,EAAST,EACTA,GAAgC,GAChC,IAAMU,EAAU,qBAChBC,IACGC,IADH,UACUF,EADV,iCAC0CD,IACvCI,MAAK,SAAAC,GACJR,EAAS,GAAD,mBAAKD,GAAL,YAAgBS,EAAIC,YAIlC,OACE,6BACE,yBAAKxB,UAAU,aACb,2BAAOyB,KAAK,OAAOC,YAAY,YAAYC,SAAU,SAAAC,GAAUf,EAAce,EAAM7B,OAAO8B,WAE5F,kBAACxB,EAAD,MACA,kBAAC,IAAD,CACEyB,WAAYhB,EAAOiB,OACnBC,KAAM,kBAAMf,EAAYR,IACxBwB,SAAS,EACTC,OAAQ,kBAAC,EAAD,OAER,kBAAC3B,EAAD,KACE,kBAAC,IAAD,CAAmB4B,wBAAyB,CAACC,IAAK,EAAGC,IAAK,EAAGC,IAAK,EAAGC,KAAM,EAAGC,KAAM,EAAGC,KAAM,IAC3F,kBAAC,IAAD,CAASC,OAAO,QACX5B,EAAO6B,QAAO,SAACC,GACd,MAAkB,IAAdhC,GAGiB,MAAZgC,EAAIC,MAAgBD,EAAIC,KAAKC,cAAcC,SAASnC,EAAWkC,eAF/DF,OAEJ,KAGJI,KAAI,SAACC,EAAOC,GAAR,OACL,kBAAC,EAAD,CAAezD,IAAKwD,EAAME,UAAWzD,IAAKuD,EAAMG,KAAMzD,MAAOsD,EAAMI,KAAMzD,MAAOqD,EAAMrD,MAAOC,SAAUoD,EAAMxD,eCxD3G6D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5C,MAAK,SAAA6C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8d7f190e.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\nimport '../App.css';\r\nconst Img = styled.img`\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n  border-radius: 20px;\r\n  cursor: pointer;\r\n  border: 1px solid #eee;\r\n`;\r\n\r\nexport const UnsplashImage = ({ url, alt, label, price, site_url }) => {\r\n  return (\r\n    <>\r\n      <a href={site_url} target=\"_blank\">\r\n        <figure>\r\n          <div className=\"imgBox\">\r\n            <Img src={url} alt={alt} />\r\n            <div className=\"description\">\r\n              <p>{label}</p>\r\n            </div>\r\n            <div className=\"price\">\r\n              <p>{price}</p>\r\n            </div>\r\n          </div>\r\n        </figure>\r\n      </a>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Loading = styled.div`\r\n\r\ntext-align: center;\r\n.lds-ellipsis {\r\n  display: inline-block;\r\n  position: relative;\r\n  width: 80px;\r\n  height: 80px;\r\n}\r\n.lds-ellipsis div {\r\n  position: absolute;\r\n  top: 33px;\r\n  width: 13px;\r\n  height: 13px;\r\n  border-radius: 50%;\r\n  background: #222;\r\n  animation-timing-function: cubic-bezier(0, 1, 1, 0);\r\n}\r\n.lds-ellipsis div:nth-child(1) {\r\n  left: 8px;\r\n  animation: lds-ellipsis1 0.6s infinite;\r\n}\r\n.lds-ellipsis div:nth-child(2) {\r\n  left: 8px;\r\n  animation: lds-ellipsis2 0.6s infinite;\r\n}\r\n.lds-ellipsis div:nth-child(3) {\r\n  left: 32px;\r\n  animation: lds-ellipsis2 0.6s infinite;\r\n}\r\n.lds-ellipsis div:nth-child(4) {\r\n  left: 56px;\r\n  animation: lds-ellipsis3 0.6s infinite;\r\n}\r\n@keyframes lds-ellipsis1 {\r\n  0% {\r\n    transform: scale(0);\r\n  }\r\n  100% {\r\n    transform: scale(1);\r\n  }\r\n}\r\n@keyframes lds-ellipsis3 {\r\n  0% {\r\n    transform: scale(1);\r\n  }\r\n  100% {\r\n    transform: scale(0);\r\n  }\r\n}\r\n@keyframes lds-ellipsis2 {\r\n  0% {\r\n    transform: translate(0, 0);\r\n  }\r\n  100% {\r\n    transform: translate(24px, 0);\r\n  }\r\n}\r\n`;\r\n\r\nexport const Loader = () => {\r\n  return (\r\n    <Loading>\r\n      <div className=\"lds-ellipsis\">\r\n        <div>\r\n        </div>\r\n        <div>\r\n        </div>\r\n        <div>\r\n        </div>\r\n        <div>\r\n        </div>\r\n      </div>\r\n    </Loading>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { UnsplashImage } from './components/UnsplashImage';\r\nimport { Loader } from './components/Loader';\r\nimport axios from 'axios';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\n\r\nimport styled from 'styled-components';\r\nimport { createGlobalStyle } from 'styled-components';\r\nimport Masonry, {ResponsiveMasonry} from \"react-responsive-masonry\";\r\n// Style\r\nconst GlobalStyle = createGlobalStyle`\r\n  * {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  body {\r\n    font-family: sans-serif;\r\n  }\r\n`;\r\n\r\nconst WrapperImages = styled.section`\r\n  width: calc(100% - 16px);\r\n  margin-left: 8px;\r\n`;\r\nvar offsetCounter = 0;\r\nfunction App() {\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [images, setImage] = useState([]);\r\n  useEffect(() => {\r\n    fetchImages();\r\n  }, [])\r\n\r\n  const fetchImages = (offset = 0) => {\r\n    offset = offsetCounter;\r\n    offsetCounter = offsetCounter + 60;\r\n    const apiRoot = \"https://xoosha.com\";\r\n    axios\r\n      .get(`${apiRoot}/ws/1/test.php?offset=${offset}`)\r\n      .then(res => {\r\n        setImage([...images, ...res.data]);\r\n      })\r\n\r\n  }\r\n  return (\r\n    <div>\r\n      <div className=\"searchBar\">\r\n        <input type=\"text\" placeholder=\"Search...\" onChange={event => {setSearchTerm(event.target.value)}}/>\r\n      </div>\r\n      <GlobalStyle />\r\n      <InfiniteScroll\r\n        dataLength={images.length}\r\n        next={() => fetchImages(offsetCounter)}\r\n        hasMore={true}\r\n        loader={<Loader />}\r\n      >\r\n        <WrapperImages>\r\n          <ResponsiveMasonry columnsCountBreakPoints={{350: 1, 500: 2, 900: 3, 1200: 4, 1400: 5, 1600: 6}}>\r\n            <Masonry gutter=\"10px\">\r\n                {images.filter((val) => {\r\n                  if (searchTerm == '') {\r\n                    return val;\r\n                  }\r\n                  else if (val.tags != null && val.tags.toLowerCase().includes(searchTerm.toLowerCase())) {\r\n                    return val;\r\n                  }\r\n                }).map((image, i) => (\r\n                  <UnsplashImage url={image.image_url} alt={image.slug} label={image.name} price={image.price} site_url={image.url}/>\r\n                ))}\r\n            </Masonry>\r\n          </ResponsiveMasonry>\r\n        </WrapperImages>\r\n      </InfiniteScroll>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}